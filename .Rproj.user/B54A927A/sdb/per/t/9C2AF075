{
    "contents" : "#' Generate C code for a function and compile it\n#' \n#' @param f Named character vector containing the right-hand sides of the ODE\n#' @param forcings Character vector with the names of the forcings\n#' @param jacobian Logical indicating whether the jacobian is computed and written into the C file\n#' @param boundary data.frame with columns name, yini, yend specifying the boundary condition set-up. NULL if not a boundary value problem\n#' @param compile Logical. If FALSE, only the C file is written\n#' @param nGridpoints Integer, defining the number of grid points between tmin and tmax where the ODE\n#' is computed in any case. \n#' @param modelname Character. The C file is generated in the working directory and is named <modelname>.c.\n#' If \\code{NULL}, a random name starting with \".f\" is chosen, i.e. the file is hidden on a UNIX system.\n#' @details The function replaces variables by arrays \\code{y[i]}, etc. and replaces \"^\" by pow() \n#' in order to have the correct C syntax. The file name of the C-File is derived from \\code{f}. \n#' I.e. \\code{funC(abc, ...} will generate a file abc.c in the current directory. \n#' Currently, only explicit ODE specification is supported, i.e. you need to have the right-hand sides of the ODE.\n#' In case you have explicitly time-dependent ODEs, please introduce time t as explicit variable, e.g. \\code{f <- c(t = \"1\", x = \"a*t - x\", ...)}.\n#' \n#' @return the name of the generated shared object file together with a number of attributes\n#' @examples \n#' # Exponential decay plus constant supply\n#' f <- c(x = \"-k*x + supply\")\n#' func <- funC(f, forcings = \"supply\")\n#' @export\nfunC <- function(f, forcings=NULL, jacobian=FALSE, boundary=NULL, compile = TRUE, nGridpoints = 500, modelname = NULL) {\n  \n  myattr <- attributes(f)\n  if(\"names\"%in%names(myattr)) myattr <- myattr[-which(names(myattr)==\"names\")]\n  \n  if(is.null(modelname)) modelname <- paste(c(\".f\", sample(c(letters, 0:9), 8, TRUE)), collapse=\"\")\n  dllname <- modelname\n  filename <- paste0(dllname, \".c\")\n  \n  ## If boundary conditions are given, sort for leftbc first\n  if(!is.null(boundary)) {\n    leftbc <- boundary$name[!is.na(boundary$yini)]\n    f <- c(f[names(f)%in%leftbc], f[!names(f)%in%leftbc])\n  }\n  \n  ## Analyze f by parser\n  \n  variables <- names(f)\n  symbols <- getSymbols(f)\n  parameters <- symbols[!symbols%in%c(variables, forcings, \"time\")]\n  jac <- NULL\n  \n  if(jacobian) jac  <- jacobianSymb(f)\n  not.zero.jac <- which(jac != \"0\")\n  \n  dv <- length(variables)\n  dp <- length(parameters)\n  if(is.null(forcings)) di <- 0 else di <- length(forcings)\n  \n  ## Replace powers and symbols to get correct C syntax\n  \n  f <- replaceOperation(\"^\", \"pow\", f)\n  f <- replaceSymbols(variables, paste0(\"y[\", 1:length(variables)-1, \"]\"), f)\n  \n  if(jacobian) {\n    jac <- replaceOperation(\"^\", \"pow\", jac)\n    jac <- replaceSymbols(variables, paste0(\"y[\", 1:length(variables)-1, \"]\"), jac)\n  }\n  \n  \n  \n  \n  \n  \n  \n  ## ------------ write C code -------------\n  \n  mypath <- system.file(package=\"R2CdeSolve\")\n  #splinefile <- paste0(\"cat \", mypath,\"/code/splineCreateEvaluate.c\")\n  includings <- c(\"#include <R.h>\",\n                  \"#include <math.h>\")\n  definitions <- paste0(\"#define \", c(parameters, paste0(\"y\",0:(dv-1),\"_0\")), \" parms[\", 0:(dv+dp-1),\"]\")\n  if(!is.null(forcings)) definitions <- c(definitions, paste0(\"#define \", forcings, \" forc[\", 0:(di-1),\"]\"))\n  \n  sink(filename)\n  cat(\"/** Code auto-generated by cOde\", as.character(packageVersion(\"cOde\")), \"**/\\n\")\n  cat(paste(includings, \"\\n\"))\n  cat(\"\\n\")\n  cat(paste(\"static double parms[\", dv+dp,\"];\\n\", sep=\"\"))\n  cat(paste(\"static double forc[\", di,\"];\\n\", sep=\"\"))\n  cat(\"\\n\")\n  cat(paste(definitions, \"\\n\"))\n  cat(\"\\n\")\n  cat(\"void initmod(void (* odeparms)(int *, double *)) {\\n\")\n  cat(paste(\"\\t int N=\", dv+dp,\";\\n\",sep=\"\"))\n  cat(\"\\t odeparms(&N, parms);\\n\")\n  cat(\"}\\n\")\n  cat(\"\\n\")\n  cat(\"void initforc(void (* odeforcs)(int *, double *)) {\\n\")\n  cat(paste(\"\\t int N=\", di,\";\\n\",sep=\"\"))\n  cat(\"\\t odeforcs(&N, forc);\\n\")\n  cat(\"}\\n\")\n  cat(\"\\n\")\n  \n  \n  ## Derivative function\n  \n  cat(\"/** Derivatives (ODE system) **/\\n\")\n  cat(\"void derivs (int *n, double *t, double *y, double *ydot, double *RPAR, int *IPAR) {\\n\")\n  cat(\"\\n\")\n  cat(\"\\t double time = *t;\\n\")\n  cat(\"\\n\")\n  \n  #if(length(reductions)>0) cat(paste(\"\\t double \", reductions, \";\\n\", sep=\"\"))\n  cat(paste(\"\\t ydot[\", 0:(dv-1),\"] = \", f,\";\\n\", sep=\"\"))\n  cat(\"\\n\")\n  cat(\"}\\n\")\n  cat(\"\\n\")\n  \n  ## Jacobian of deriv\n  if(jacobian) {\n    cat(\"/** Jacobian of the ODE system **/\\n\")\n    cat(\"void jacobian (int *n, double *t, double *y, double * df, double *RPAR, int *IPAR) {\\n\")\n    cat(\"\\n\")\n    cat(\"double time = *t;\\n\")\n    cat(\"\\n\")\n    cat(\"\\t int i;\\n\")\n    cat(\"for(i=0; i<(*n) * (*n); i++) df[i] = 0.;\\n\")\n    cat(paste(\"\\t df[\", not.zero.jac-1,\"] = \", jac[not.zero.jac],\";\\n\", sep=\"\"))\n    cat(\"\\n\")\n    cat(\"}\\n\")\n    cat(\"\\n\")\n  }\n  \n  \n  if(!is.null(boundary)) {\n    \n    ## Check length of boundary conditions\n    nbc <- length(which(!is.na(c(boundary$yini, boundary$yend))))\n    if(nbc != dv) {\n      sink()\n      warning(\"Number of boundary conditions not correct\\n\")\n      return()\n    }\n    \n    boundary <- boundary[match(variables, boundary$name),]\n    \n    leftbc <- which(!is.na(boundary$yini))\n    rightbc <- which(!is.na(boundary$yend))\n    myorder <- c(leftbc, rightbc)\n    \n    ## Boundary Condition (for compatibility with bvpSolve)\n    \n    cat(\"/** Boundary Conditions **/\\n\")\n    cat(\"void gsub(int *i, int *n, double *z, double *g, double *RPAR, int *IPAR) {\\n\")\n    cat(\"\\n\")\n    cat(paste(\"\\t if (*i==\", 1,\") *g=z[\", myorder[1]-1, \"]-y\", 0, \"_0;\\n\", sep=\"\"))\n    if(dv>1) cat(paste(\"\\t else if (*i==\", 2:dv,\") *g=z[\", myorder[-1]-1, \"]-y\", 2:dv-1, \"_0;\\n\", sep=\"\"))\n    cat(\"\\n\")\n    cat(\"}\\n\")\n    cat(\"\\n\")\n    \n    ## Jacobian of Boundary Condition (for compatibility with bvpSolve)\n    \n    cat(\"/** Jacobian of the Boundary Conditions **/\\n\")\n    cat(\"void dgsub(int *i, int *n, double *z, double *dg, double *RPAR, int *IPAR) {\\n\")\n    cat(\"\\n\")\n    cat(\"\\t int j;\\n\")\n    cat(\"\\t for (j = 0; j< *n; j++) dg[j] = 0;\\n\")\n    \n    cat(paste(\"\\t if (*i==\", 1,\") dg[\", myorder[1]-1, \"] = 1.;\\n\", sep=\"\"))\n    if(dv>1) cat(paste(\"\\t else if (*i==\", 2:dv,\") dg[\", myorder[-1]-1, \"]=1.;\\n\", sep=\"\"))\n    cat(\"\\n\")\n    cat(\"}\\n\")\n  }\n  \n  \n  \n  sink()\n  \n  ## ----------- compile C code and load shared object file---------\n  \n  .so <- .Platform$dynlib.ext\n  soExists <- file.exists(paste0(dllname, .so))\n  if(compile) \n    system(paste(\"R CMD SHLIB\", filename))\n  \n  #dyn.load(paste0(dllname, .so))\n  \n  \n  ## ----------- function return -----------\n  \n  \n  f <- dllname\n  attributes(f) <- c(attributes(f), myattr)\n  \n  attr(f, \"variables\") <- variables\n  attr(f, \"parameters\") <- parameters\n  attr(f, \"forcings\") <- forcings\n  attr(f, \"jacobian\") <- jacobian\n  attr(f, \"boundary\") <- boundary\n  attr(f, \"nGridpoints\") <- nGridpoints\n  \n  \n  class(f) <- c(\"nospline\", class(f))\n  \n  \n  \n  return(f)\n  \n}\n\n\n\n#' Dynamically load DLL with automatic unloading of conflicting DLLs\n#' \n#' @param func result from funC(), contains the information about the DLL name to be loaded\n#' @param cfunction character, denoting the C function name.\n#' @details If the C function name is already part of another loaded DLL, the corresponding DLL is\n#' unloaded and the desired func DLL is loaded instead.\n#' @export\nloadDLL <- function(func, cfunction=\"deriv\") {\n  \n  .so <- .Platform$dynlib.ext\n  checkDLL <- try(getNativeSymbolInfo(cfunction), silent=TRUE)\n  if(inherits(checkDLL, \"try-error\")) {\n    dyn.load(paste0(func, .so))\n  } else if((checkDLL$package)[[1]] != func) {\n    #warning(\"Conflicting DLL was unloaded\")\n    dyn.unload(paste0((checkDLL$package)[[1]], .so))\n    dyn.load(paste0(func, .so))\n  }\n  \n}\n\n#' Generate interpolation spline for the forcings and write into list of matrices\n#' \n#' @param func result from funC()\n#' @param forcings data.frame with columns name (factor), time (numeric) and value (numeric)\n#' @return list of matrices with time points and values assigned to the forcings interface of deSolve\n#' @details Splines are generated for each name in forcings and both, function value and first\n#' derivative are evaluated at the time points of the data frame.\n#' @examples\n#' f <- c(x = \"-k*x + a - b\")\n#' func <- funC(f, forcings = c(\"a\", \"b\"))\n#' forcData <- rbind(\n#'   data.frame(name = \"a\", time = c(0, 1, 10), value = c(0, 5, 2)),\n#'   data.frame(name = \"b\", time = c(0, 5, 10), value = c(1, 3, 6)))\n#' forc <- setForcings(func, forcData) \n#' @export\nsetForcings <- function(func, forcings) {\n  \n  \n  inputs <- attr(func, \"forcings\")\n  \n  times <- NULL\n  values <- NULL\n  timespan <- range(forcings$time)\n  \n  out <- do.call(c, lapply(inputs, function(i) {\n    \n    t <- forcings[forcings$name == i, \"time\"]\n    x <- forcings[forcings$name == i, \"value\"]\n    \n    if(length(t)==1) {\n      t <- seq(timespan[1], timespan[2], len=4)\n      x <- rep(x, 4)\n    }\n    \n    \n    \n    mat <- list(cbind(t, x))\n    names(mat) <- i\n    \n    \n    return(mat)\n    \n  }))\n  \n  \n  return(out)\n  \n}\n\n\n#' Interface to ode()\n#' \n#' @param y named vector of type numeric. Initial values for the integration\n#' @param times vector of type numeric. Integration times\n#' @param func return value from funC()\n#' @param parms named vector of type numeric. \n#' @param ... further arguments going to \\code{ode()}\n#' @details See deSolve-package for a full description of possible arguments\n#' @return matrix with times and states\n#' @example inst/examples/example1.R\n#' @export\nodeC <- function(y, times, func, parms, ...) {\n  \n  nGridpoints <- attr(func, \"nGridpoints\")\n  times.inner <- seq(min(c(times, 0)), max(times), len=nGridpoints)\n  times.inner <- sort(unique(c(times, times.inner)))\n  which.times <- match(times, times.inner)\n  \n  loadDLL(func)\n  y <- y[attr(func, \"variables\")]\n  parms <- parms[attr(func, \"parameters\")]\n  parms <- c(parms, rep(0, length(y)))\n  if (attr(func, \"jacobian\")) \n    jacfunc <- \"jacobian\"\n  else jacfunc <- NULL\n  if (is.null(attr(func, \"forcings\"))) \n    initforc <- NULL\n  else initforc <- \"initforc\"\n  out <- deSolve::ode(y, times.inner, \"derivs\", parms, dllname = func, initfunc = \"initmod\", \n             initforc = initforc, jacfunc = jacfunc, \n             ...)[which.times,]\n  return(out)\n  \n  \n}\n\n\n#' Interface to bvptwp()\n#' \n#' \n#' @param yini named vector of type numeric. Initial values to be overwritten.\n#' @param x vector of type numeric. Integration times\n#' @param func return value from funC() with a boundary argument. \n#' @param yend named vector of type numeric. End values to be overwritten.\n#' @param parms named vector of type numeric. The dynamic parameters.\n#' @param xguess vector of type numeric, the x values\n#' @param yguess matrix with as many rows as variables and columns as x values\n#' @param ... further arguments going to \\code{bvptwp()}\n#' @details See bvpSolve-package for a full description of possible arguments\n#' @return matrix with times and states\n#' @example inst/examples/example4.R\n#' @export\nbvptwpC <- function(yini=NULL, x, func, yend=NULL, parms, xguess=NULL, yguess=NULL,  ...) {\n  \n  loadDLL(func)\n  \n  dynpar <- parms[attr(func, \"parameters\")]\n  boundary <- attr(func, \"boundary\")\n  leftbc <- boundary$name[!is.na(boundary$yini)]\n  rightbc <- boundary$name[!is.na(boundary$yend)]\n  \n  ## Fill yini/yend with values from func. If yini/yend are given,\n  ## set their values.\n  bini <- boundary$yini\n  names(bini) <- boundary$name\n  bini <- bini[!is.na(bini)]\n  \n  bend <- boundary$yend\n  names(bend) <- boundary$name\n  bend <- bend[!is.na(bend)]\n  \n  \n  if(!is.null(yini)) bini[names(yini)] <- yini\n  if(!is.null(yend)) bend[names(yend)] <- yend\n  if(is.null(attr(func, \"forcings\"))) initforc <- NULL else initforc <- \"initforc\"\n  \n  \n  \n  posbound <- c(rep(min(x), length(bini)), rep(max(x), length(bend)))\n  \n  \n  statepars <- c(bini, bend)\n  newparms <- c(dynpar, statepars)\n  \n  \n  out <- bvpSolve::bvptwp(x = x, parms = newparms, xguess = xguess, yguess = yguess, posbound=posbound,\n                          func = \"derivs\", jacfunc = \"jacobian\", bound = \"gsub\", jacbound = \"dgsub\", \n                          initfunc = \"initmod\", initforc = initforc,\n                          dllname = func,\n                          ncomp = length(statepars),\n                          ...)\n  \n  colnames(out) <- c(\"x\", attr(func, \"variables\"))\n  \n  return(out)\n  \n  \n}\n\n",
    "created" : 1425548436667.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2158090703",
    "id" : "9C2AF075",
    "lastKnownWriteTime" : 1425894938,
    "path" : "~/cOde/R/cOde.R",
    "project_path" : "R/cOde.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}